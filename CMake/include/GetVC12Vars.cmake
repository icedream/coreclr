function(GetVC12Vars RESULT_NAME)
	set(${RESULT_NAME}_INSTALLED 0)

	if(WIN32)
		message(STATUS "Checking for Visual Studio 2013")

		# TODO: Support ARM cross-build
		if(CMAKE_TARGET_ARCHITECTURE_CODE STREQUAL "amd64")
			if (CMAKE_CL_64)
				set(${RESULT_NAME}_TOOLCHAIN "amd64")
			else()
				set(${RESULT_NAME}_TOOLCHAIN "x86_amd64")
			endif()
		elseif(CMAKE_TARGET_ARCHITECTURE_CODE STREQUAL "arm")
			set(${RESULT_NAME}_TOOLCHAIN "arm")
		elseif(CMAKE_TARGET_ARCHITECTURE_CODE STREQUAL "arm64")
			set(${RESULT_NAME}_TOOLCHAIN "arm")
		else()
			if (CMAKE_CL_64)
				set(${RESULT_NAME}_TOOLCHAIN "amd64_x86")
			else()
				set(${RESULT_NAME}_TOOLCHAIN "x86")
			endif()
		endif()
		set(${RESULT_NAME}_TOOLCHAIN "${${RESULT_NAME}_TOOLCHAIN}" PARENT_SCOPE)

		# Check %VS120COMNTOOLS%
		STRING(REGEX REPLACE "\\\\\\\\" "\\\\" VCVARSALLBAT "$ENV{VS120COMNTOOLS}/../../VC/vcvarsall.bat")
		STRING(REGEX REPLACE "\\\\" "/" VCVARSALLBAT_CMAKE "${VCVARSALLBAT}")
		if(EXISTS "${VCVARSALLBAT_CMAKE}")
			# Run vcvarsall.bat and set variables accordingly
			set(vcvars_bat_code "
@call \"${VCVARSALLBAT}\" ${${RESULT_NAME}_TOOLCHAIN}

@echo set(${RESULT_NAME}_INSTALLED 1)
@echo set(${RESULT_NAME}_INCLUDE \"%INCLUDE:\\=\\\\%\")
@echo set(${RESULT_NAME}_LIB \"%LIB:\\=\\\\%\")
@echo set(${RESULT_NAME}_LIBPATH \"%LIBPATH:\\=\\\\%\")
@echo set(${RESULT_NAME}_PATH \"%PATH:\\=\\\\%\")
@echo set(${RESULT_NAME}_VSINSTALLDIR \"%VSINSTALLDIR:\\=/%\")
@echo set(${RESULT_NAME}_VCINSTALLDIR \"%VCINSTALLDIR:\\=/%\")

@echo set(${RESULT_NAME}_INSTALLED \${${RESULT_NAME}_INSTALLED} PARENT_SCOPE)
@echo set(${RESULT_NAME}_INCLUDE \"\${${RESULT_NAME}_INCLUDE}\" PARENT_SCOPE)
@echo set(${RESULT_NAME}_LIB \"\${${RESULT_NAME}_LIB}\" PARENT_SCOPE)
@echo set(${RESULT_NAME}_LIBPATH \"\${${RESULT_NAME}_LIBPATH}\" PARENT_SCOPE)
@echo set(${RESULT_NAME}_PATH \"\${${RESULT_NAME}_PATH}\" PARENT_SCOPE)
@echo set(${RESULT_NAME}_VSINSTALLDIR \"\${${RESULT_NAME}_VSINSTALLDIR}\" PARENT_SCOPE)
@echo set(${RESULT_NAME}_VCINSTALLDIR \"\${${RESULT_NAME}_VCINSTALLDIR}\" PARENT_SCOPE)
")
			file(WRITE "${CMAKE_BINARY_DIR}/vcvars.bat" "${vcvars_bat_code}")
			execute_process(COMMAND cmd /c @call "${CMAKE_BINARY_DIR}/vcvars.bat"
				OUTPUT_VARIABLE process_output
				OUTPUT_STRIP_TRAILING_WHITESPACE)
			file(REMOVE "${CMAKE_BINARY_DIR}/vcvars.bat")
			file(WRITE "${CMAKE_BINARY_DIR}/vcvars.cmake" "${process_output}")
			include("${CMAKE_BINARY_DIR}/vcvars.cmake")
			#file(REMOVE "${CMAKE_BINARY_DIR}/vcvars.cmake")

			if(EXISTS "${${RESULT_NAME}_VCINSTALLDIR}${${RESULT_NAME}_TOOLCHAIN}/ml.exe")
				set(${RESULT_NAME}_ML "${${RESULT_NAME}_VCINSTALLDIR}${${RESULT_NAME}_TOOLCHAIN}/ml.exe" PARENT_SCOPE)
			elseif(EXISTS "${${RESULT_NAME}_VCINSTALLDIR}/${${RESULT_NAME}_TOOLCHAIN}/ml.exe")
				set(${RESULT_NAME}_ML "${${RESULT_NAME}_VCINSTALLDIR}/${${RESULT_NAME}_TOOLCHAIN}/ml.exe" PARENT_SCOPE)
			elseif(EXISTS "${${RESULT_NAME}_VCINSTALLDIR}${${RESULT_NAME}_TOOLCHAIN}/ml64.exe")
				set(${RESULT_NAME}_ML "${${RESULT_NAME}_VCINSTALLDIR}${${RESULT_NAME}_TOOLCHAIN}/ml64.exe" PARENT_SCOPE)
			elseif(EXISTS "${${RESULT_NAME}_VCINSTALLDIR}/${${RESULT_NAME}_TOOLCHAIN}/ml64.exe")
				set(${RESULT_NAME}_ML "${${RESULT_NAME}_VCINSTALLDIR}/${${RESULT_NAME}_TOOLCHAIN}/ml64.exe" PARENT_SCOPE)
			elseif(EXISTS "${${RESULT_NAME}_VCINSTALLDIR}ml.exe")
				set(${RESULT_NAME}_ML "${${RESULT_NAME}_VCINSTALLDIR}ml.exe" PARENT_SCOPE)
			else()
				set(${RESULT_NAME}_ML "${${RESULT_NAME}_VCINSTALLDIR}/ml.exe" PARENT_SCOPE)
			endif()

			if ("${${RESULT_NAME}_ML}" MATCHES "64\\.exe$")
				set(${RESULT_NAME}_ML_IS64 1)
			else()
				set(${RESULT_NAME}_ML_IS64 0)
			endif()
		else()
			message(STATUS "Checking for Visual Studio 2013 - ${VCVARSALLBAT} not existent")
		endif()

		if(${${RESULT_NAME}_INSTALLED})
			message(STATUS "Checking for Visual Studio 2013 - found in ${${RESULT_NAME}_VSINSTALLDIR}")
		else()
			message(STATUS "Checking for Visual Studio 2013 - NOT found")
		endif()
	else()
		message(STATUS "Skipping Visual Studio 2013 check")
	endif(WIN32)

endfunction()